/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(trapentry0, T_DIVIDE)
TRAPHANDLER_NOEC(trapentry1, T_DEBUG)
TRAPHANDLER_NOEC(trapentry2, T_NMI)
TRAPHANDLER_NOEC(trapentry3, T_BRKPT)
TRAPHANDLER_NOEC(trapentry4, T_OFLOW)
TRAPHANDLER_NOEC(trapentry5, T_BOUND)
TRAPHANDLER_NOEC(trapentry6, T_ILLOP)
TRAPHANDLER_NOEC(trapentry7, T_DEVICE)
TRAPHANDLER(trapentry8, T_DBLFLT)
/*
 * T_COPROC 9 not generated by recent processors
 */
TRAPHANDLER(trapentry10, T_TSS)
TRAPHANDLER(trapentry11, T_SEGNP)
TRAPHANDLER(trapentry12, T_STACK)
TRAPHANDLER(trapentry13, T_GPFLT)
TRAPHANDLER(trapentry14, T_PGFLT)
/*
 * T_RES 15 reserved by intel
 */
TRAPHANDLER_NOEC(trapentry16, T_FPERR)
TRAPHANDLER(trapentry17, T_ALIGN)
TRAPHANDLER_NOEC(trapentry18, T_MCHK)
TRAPHANDLER_NOEC(trapentry19, T_SIMDERR)
/*
 * Exceptions 20-31 intel reserved
 */

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
	pushl %ds
	pushl %es
	pushal

	movw $GD_KT, %ax
	movw %ax, %ds
	movw %ax, %es

	pushl %esp # tf argument to trap(struct Trapframe *tf)
	call trap



	.data
	.globl trapentries
trapentries:
	.long trapentry0, trapentry1, trapentry2, trapentry3, trapentry4,   \
	trapentry5, trapentry6, trapentry7, trapentry8, 0,trapentry10,      \
	trapentry11, trapentry12, trapentry13, trapentry14, 0, trapentry16, \
	trapentry17, trapentry18, trapentry19
